@model DropIt.ViewModels.PostTicket
@using BootstrapExtensions.Base
@using BootstrapExtensions.Base.Button
@using BootstrapExtensions.Base.Form
@using BootstrapExtensions.Base.Form.Label
@using BootstrapExtensions.Components.Alert
@using DropIt.Common
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    var categories = @Html.Raw(Json.Encode(ViewBag.CategoryId))
</script>
@if (User.IsInRole("Administrator"))
{
    <div class="container" id="content">
        <div class="admin-image">
            <img src="/Content/Images/error.png" />
        </div>
        <center><h3> Xin lỗi! admin không thể thực hiện giao dịch! </h3></center>
        <br />
        <center>    
            <a href="/Home/Index" class="btn btn-gen">Quay về trang chủ</a>
        </center>
        <br />
        <br />
    </div>
    
}
else if (ViewBag.NoPostTicket >= ViewBag.noSetting)
{
    <div class="container" id="content">
        <div class="admin-image">
            <img src="/Content/Images/error.png" />
        </div>
        <center><h3>Xin lỗi bạn đã thực hiện quá số lần đăng vé trong 1 ngày!</h3></center>
        <br />
        <center>    
            <a href="/Home/Index" class="btn btn-gen">Quay về trang chủ</a>
        </center>
        <br />
        <br />
    </div>
}
else if (ViewBag.Sellable != true)
{
    <div class="container" id="content">
        <div class="admin-image">
            <img src="/Content/Images/error.png" />
        </div>
        <center><h3>Xin lỗi tài khoản của bạn không được phép bán!</h3></center>
        <br />
        <center>    
            <a href="/Home/Index" class="btn btn-gen">Quay về trang chủ</a>
        </center>
        <br />
        <br />
    </div>
}
else
{
    double see = Double.Parse(Settings.get("ServiceFee"));
    double minPrice = Double.Parse(Settings.get("MinSellPrice"));
    double maxPrice = Double.Parse(Settings.get("MaxSellPrice"));
    <style>
        .form1 .error {
            font-size: 12px;
            color: red;
        }

        .select2-container {
            width: 364px !important;
        }
        /*.control-group .popover {
            margin-left: 15px;
            margin-top: -20px;
        }*/
    </style>
    <div class="container" id="content">
        <div id="request-ticket" class="form1">
            @using (Html.HorizontalForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "alert alert-error" })

                <h3>Đăng vé</h3>

                <div class="control-group">
                    <label class="control-label" for="EventId">Tên Sự kiện:</label>
                    <div class="controls">
                        <div class="input-append">
                            <span data-bind="visible: isCreateEvent() == false">
                                @Html.DropDownList("EventId", (SelectList)ViewBag.EventId, new { data_bind = "value : EventId, event :{ change : selectEventChange}" })
                            </span>
                            @Html.TextBox("EventName", String.Empty, new { data_bind = "visible:isCreateEvent" })
                            <span class="add-on">
                                <input type="checkbox" id="CreateEvent" data-bind="checked: isCreateEvent" name="CreateEvent">
                                <label for="CreateEvent"
                                    data-trigger="manual" data-toggle="popover" title="Sự kiện" data-content="Bạn nên xem kỹ danh sách các sự kiện để chọn đúng sự kiện trước khi tạo mới để vé của bạn được đăng lên ngay lập tức">
                                    Tạo mới</label>
                            </span>
                        </div>
                    </div>
                </div>
                <fieldset>
                    <legend>Thông tin sự kiện</legend>
                    <div class="control-group">
                        <label class="control-label" for="category">Danh mục</label>
                        <div class="controls">
                            <select id="category" name="CategoryId" style="width: 100%">
                            </select>
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label" for="HoldDate">Thời gian:</label>
                        <div class="controls">
                            <div class="input-append">
                                @Html.TextBox("HoldDate", String.Empty, new { data_bind = "enable: isCreateEvent(), date: HoldDate", data_format = "dd/MM/yyyy  hh:mm:ss" })

                                <button class="btn" type="button" data-bind="visible: isCreateEvent()">
                                    <div class="add-on">
                                        <i class='icon-calendar' style="color: black"></i>
                                    </div>
                                </button>

                            </div>
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label" for="VenueId">Nơi tổ chức</label>
                        <div class="controls">
                            <div class="input-append">
                                <span data-bind="visible: isCreateEvent() == true && isCreateVenue() == false">
                                    @Html.DropDownList("VenueId", (SelectList)ViewBag.VenueId, new { data_bind = "select2:{},value : VenueId, event :{ change : selectVenueChange}" })
                                </span>
                                <input type="text" data-bind="value: VenueName, visible: isCreateEvent() == false" disabled />
                                @Html.TextBox("VenueName", String.Empty, new { data_bind = "visible: isCreateEvent() == true && isCreateVenue() == true " })
                                <span class="add-on" data-bind="visible: isCreateEvent">
                                    <input type="checkbox" id="CreateVenue" data-bind="checked: isCreateVenue" name="CreateVenue">
                                    <label for="CreateVenue">Tạo mới</label>
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label" for="VenueId">Địa chỉ:</label>
                        <div class="controls">
                            @Html.TextBox("Address", String.Empty, new { data_bind = "enable: isCreateEvent() == true && isCreateVenue() == true, value: VenueAddress" })
                        </div>
                    </div>

                    <div class="control-group">
                        <label class="control-label" for="ProvinceId">Tỉnh thành:</label>
                        <div class="controls">
                            @Html.DropDownList("ProvinceId", (SelectList)ViewBag.ProvinceId, new { data_bind = "enable: isCreateEvent() == true && isCreateVenue() == true,value: ProvinceId,select2:{}" })
                        </div>
                    </div>
                </fieldset>
                
                @Html.LabelAndControl("Mã vé:", Html.EditorFor(model => model.SeriesNumber))

                @Html.LabelAndControl("Chỗ ngồi:", Html.EditorFor(model => model.Seat))

                <div class="control-group">
                    <label class="control-label" for="Description">Miêu tả:</label>
                    <div class="controls">
                        @Html.TextArea("Description", String.Empty)
                    </div>
                </div>

                <div class="control-group">
                    <label class="control-label" for="SellPrice">Giá muốn bán [@minPrice VND- @maxPrice VND](*):</label>
                    <div class="controls">
                        @Html.TextBox("SellPrice", String.Empty, new { data_bind = "value: SellPrice", required = "required" })
                    </div>
                </div>
                <div class="controls validate"></div>
                <input type="hidden" id="servicefee" value="@see"/>
                <div class="control-group">
                    <label class="control-label" for="ReceiveMoney">Số tiền nhận được sau khi trừ các khoản thuế (<span data-bind="text: (ServiceRate * 100).toFixed(0)"></span>%):</label>
                    <div class="controls">
                        @Html.TextBox("ReceiveMoney", String.Empty, new { disabled = "true", data_bind = "value:RecievePrice" })
                    </div>
                </div>


                <div class="control-group" style="margin-left: 35%; margin-top: -20px;">
                    <label class="checkbox">
                        <input type="checkbox" name="AgreeTerm" id="AgreeTerm" required title="Bạn phải đồng ý với điều khoản sử dụng" />
                        Tôi Đồng ý với tất cả các Điều Khoản Sử Dụng
                    </label>
                </div>
                <input type="hidden" id="passSuggestion" name="passSuggestion" required />
                <button type="submit" class="btn btn-mid btn-gen">Đăng vé</button>
                <a href="@Url.Action("Sell", "Home")" class="btn btn-mid btn-cancel">Hủy bỏ</a>
            }
        </div>
    </div>

    <style>
        .select2-results {
            max-height: 300px;
        }

        .select2-result-label {
            overflow: hidden;
        }

            .select2-result-label img {
                float: left;
                margin-right: 5px;
                width: 60px;
                height: 80px;
            }

        .select2-result {
            clear: both;
        }

        .control-group {
            margin-left: 145px;
        }
    </style>
    <script type="text/javascript">
        $("[data-toggle='popover']").popover();
        function formatEventRow(state) {
            if (!state.id) return state.text;
            return "<img src='/Event/Image/" + $(state.element).val() + "'/>" + state.text;
        }
        $("#EventId").select2({
            formatResult: formatEventRow,
            escapeMarkup: function (m) { return m; },
            //matcher: function (term, text) { return text.toLowerCase().VNFilter().indexOf(term.toLowerCase().VNFilter()) >= 0; }
        });

        function CreateTicketViewModel() {
            var self = this;

            self.isCreateEvent = ko.observable(false);
            self.isCreateVenue = ko.observable(false);

            self.EventId = ko.observable();
            self.HoldDate = ko.observable();
            self.VenueId = ko.observable();
            self.VenueName = ko.observable();
            self.VenueAddress = ko.observable();
            self.ProvinceId = ko.observable();
            self.CategoryId = ko.observable();
            self.SellPrice = ko.observable();
            self.ServiceRate = $("#servicefee").val();
            self.RecievePrice = ko.computed(function () {
                return new Number(parsePrice(self.SellPrice()) * (1 - self.ServiceRate)).formatMoney(0, ".", ",");
            })

            self.selectEventChange = function () {
                $.ajax({
                    url: Url({ Controller: "Event", Action: "getInfo" }),
                    type: "POST",
                    data: "EventId=" + self.EventId(),
                    success: function (data) {
                        if (data.Result && data.Result == "OK" && data.Records) {
                            var record = data.Records[0]
                            self.HoldDate(record.HoldDate)
                            self.VenueName(record.VenueName)
                            self.VenueAddress(record.Address)
                            self.ProvinceId(record.ProvinceId)
                            self.CategoryId(record.CategoryId)
                        }
                    }
                })
            }

            self.selectVenueChange = function () {
                $.ajax({
                    url: Url({ Controller: "Venue", Action: "getInfo" }),
                    type: "POST",
                    data: "VenueId=" + self.VenueId(),
                    success: function (data) {
                        if (data.Result && data.Result == "OK" && data.Records) {
                            var record = data.Records[0]
                            self.VenueAddress(record.Address)
                            self.ProvinceId(record.ProvinceId)
                            self.CategoryId(record.CategoryId)
                        }
                    }
                })
            }

            self.isCreateEvent.subscribe(function (value) {
                var pop = $("label[for='CreateEvent']");
                if (value) {
                    pop.popover("show");
                    pop.parent().find(".popover").css({
                        marginLeft: 15,
                        marginTop: -20
                    })
                } else {
                    pop.popover("hide");
                    pop.parent().find(".popover").css({
                        marginLeft: 0,
                        marginTop: 0
                    })
                }
            })
        }

        


        

        validateOptions = {
            //debug:true,
            rules: {
                SellPrice: {
                    required: true
                },
                EventName: {
                    depends: function (element) {
                        return $("#createEvent:checked");
                    }
                },
                HoldDate: {
                    greaterThanToday: true
                }
            },
            messages: {
                SellPrice: "Cần phải điền giá bán",
                EventName: "Cần phải điền tên sự kiện khi tạo mới"
            },
            submitHandler:FormSubmitHandler
            //,
            //errorLabelContainer:$('.validation-summary-errors')
        }

        var startDate = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() + 1, 18, 0, 0, 0);

        $(function () {
            ctvm = new CreateTicketViewModel();
            ko.applyBindings(ctvm, $("#content")[0]);
            $("#HoldDate").parent().datetimepicker({ pickSeconds: false, maskInput: false, startDate: startDate });
            var picker = $('#HoldDate').parent().data('datetimepicker');
            picker.setLocalDate(startDate);
            $(".form1 form").submit(FormSubmitHandler);
            var defaultEvent = location.request("EventId");
            if (defaultEvent != "") {
                $("#EventId").select2("val", defaultEvent);
                $("#EventId").trigger("change");
            }
        })

        generateGroupDropDownList(categories,$("#category"),"CategoryId","CategoryName");
        $("select").select2();
    </script>
    
    
    
    
    @Scripts.Render("~/bundles/jqueryval")

}