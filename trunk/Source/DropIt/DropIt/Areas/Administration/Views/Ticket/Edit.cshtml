@model DropIt.Areas.Administration.ViewModels.TicketViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Administration/Views/Shared/_Layout.cshtml";
}
@Scripts.Render("~/Bundles/jquery.validate")
@Scripts.Render("~/Content/ckeditor/ckeditor.js")
@Scripts.Render("~/bundles/jqueryval")
<style>
    label {
        font-weight: bold;
    }

    .input {
        margin-top: 15px;
    }
</style>
<script>
    var Model = @Html.Raw(Json.Encode(Model));
</script>
@if (Model.Status == (int)DropIt.Common.Statuses.Ticket.OnTransaction)
{
               
    <div class="alert">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>Cảnh báo!</strong> Mã vé này đang giao dịch không thể sửa thông tin
    </div>
    <div class="cf"></div>
    <script>
        $(function(){
            $("#createEvent input,#createEvent textarea").addClass("disabled").attr("disabled","disabled");
            $("#createEvent select").select2("enable",false);
        })
    </script>
}
  <script>
      $(function(){
          $("input.disable").attr("disabled","disabled");
         
      })
    </script>
<div class="box" style="clear: both">
    <div class="tab-header">
        Chỉnh sửa Vé
    </div>
    <form class="fill-up" id="createEvent" method="post" enctype="multipart/form-data">
        <div class="row-fluid">
            <div class="span6">
                <div class="padded">
                    @*<input type="hidden" name="VenueId" value="@Model.VenueId" />*@
                    @Html.HiddenFor(t => t.TicketId)
                    @Html.HiddenFor(t => t.UserId)
                    <div class="input">
                        <label for="series">Mã số Vé</label>
                        @Html.HiddenFor(t => t.SeriesNumber)
                        <input id="series" type="text" class="disable" name="" value="@Model.SeriesNumber"/>
                    </div>
                    <div class="input">
                        <label for="price">Giá bán</label>
                        @Html.HiddenFor(t => t.SellPrice)
                        <input id="price" type="number" class="disable" name="" value="@Model.SellPrice"/>
                    </div>

                    <div class="input">
                        <label for="seat">Ghế ngồi</label>
                        @Html.HiddenFor(t => t.Seat)
                        <input id="seat" type="text" class="disable" name="" value="@Model.Seat"/>
                    </div>
                    <div class="input">
                        <label for="event">Sự kiện</label>
                        @Html.DropDownList("EventId", (SelectList)ViewBag.EventId, new { data_bind = "value : EventId, event :{ change : selectVenueChange}, select2:{}", style = "width:100%", id="event" })
                    </div>
                    <div class="input">
                        <label for="holdDate">Ngày diễn ra</label>
                        @Html.TextBox("HoldDate", String.Empty, new { data_bind = "enable: isCreateEvent(), date: HoldDate", data_format = "dd/MM/yyyy  hh:mm:ss" })
                    </div>
                    <div class="input">
                        <label for="venue">Địa điểm</label>
                        <input type="text" data-bind="value: VenueName,visible: isCreateEvent() == false" disabled />
                        @Html.TextBox("VenueName", String.Empty, new { data_bind = "visible: isCreateEvent() == true && isCreateVenue() == true " })
                    </div>
                </div>
            </div>
            <div class="span6">
                <div class="padded">
                    <div class="input">
                        <label for="Description">Chú thích</label>
                        <textarea name="Description" id="Description" style="width: 100%; height: 100px;">@Model.Description</textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-actions">
            @if (Model.Status != (int)DropIt.Common.Statuses.Ticket.OnTransaction)
            {
                <button type="submit" class="button blue">Cập nhật</button>
            }
            <a href="@Url.Action("Index")" class="button">Hủy</a>
        </div>
    </form>
</div>
<script>
    CKEDITOR.replace('Description', {
        toolbar: [
		{ name: 'clipboard', items: ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'] },
		{ name: 'editing', items: ['Find', 'Replace', '-', 'SelectAll', '-', 'Scayt'] },
		{
		    name: 'insert', items: ['Image', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak'
		    ]
		},
                '/',
		{ name: 'styles', items: ['Styles', 'Format'] },
		{ name: 'basicstyles', items: ['Bold', 'Italic', 'Strike', '-', 'RemoveFormat'] },
		{ name: 'paragraph', items: ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote'] },
		{ name: 'links', items: ['Link', 'Unlink', 'Anchor'] },
		{ name: 'tools', items: ['Maximize', '-', 'About'] }
        ]
    })


    validateOptions = {
        rules: {
            SellPrice: {
                required: true
            },
            EventId: {
                required: true
            }
        },
        messages: {
            SellPrice: "Cần phải điền giá vé",
            EventId: "Phải chọn Sự kiện",
        }
        //,
        //errorLabelContainer:$('.validation-summary-errors')
        , errorElement: "span",
        errorClass: "error",
        errorPlacement: function (error, element) {
            error.insertAfter(element.parent().find("label"));
        },
        ignore: ".select2-focusser,.select2-input"
    }
   
    
  
   
    function submit() {
        Loading(true, true);
        $("#Description").val(CKEDITOR.instances.Description.getData());
        var formData = new FormData($("#createEvent")[0]);
        function success(rs) {
            Loading(false);
            if (rs.Result && rs.Result == "OK") {
                location = Url({ Action: "Index" })
            } else {
                $.fn.dialog2.helpers.alert("Lỗi: " + rs.Message);
            }
        }
        $.ajax({
            url: Url({ Action: "Edit" }),
            type: "POST",
            data: formData,
            success: success,
            processData: false,
            contentType: false,
            error: function () {
                Loading(false);
                $.fn.dialog2.helpers.alert("Có lỗi xảy ra khi gửi dữ liệu lên server");
            }
        });

    }
    $("#createEvent").submit(function (e) {
        if ($("#createEvent").valid()) {
            submit();
            return false;
        }
    })

    function TiketViewModel() {
        var self = this;

        self.isCreateEvent = ko.observable(false);
        self.isCreateVenue = ko.observable(false);

        self.EventId = ko.observable();
        self.HoldDate = ko.observable();
        self.VenueName = ko.observable();
        self.VenueAddress = ko.observable();
        
        self.selectVenueChange = function() {
            $.ajax({
                url: Url({ Controller: "Event", Action: "getInfo" }),
                type: "POST",
                data: "EventId=" + self.EventId(),
                success: function(data) {
                    if (data.Result && data.Result == "OK" && data.Records) {
                        var record = data.Records[0]
                        self.HoldDate(record.HoldDate)
                        self.VenueName(record.VenueName)
                        self.VenueAddress(record.Address)
                    }
                }
            })
        }
    }

    $(function() {
        ctvm = new TiketViewModel();
        ko.applyBindings(ctvm);
        $("#createEvent").validate(validateOptions);
        $("#event").select2("val", "@Model.EventId");
    })    
</script>
